import os
import json
import logging
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä, "https://telegrambot-production-xxxx.up.railway.app"
PORT = int(os.getenv("PORT", 5000))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
server = Flask(__name__)

# –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Application.builder().token(TOKEN).build()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
DATA_FILE = "forwards.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        forwards = json.load(f)
else:
    forwards = {}

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
async def create_forward(update: Update, context):
    if len(context.args) < 4:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /CreateForward from GROUP_ID to GROUP_ID by '–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'")
        return

    group_from = context.args[0]
    group_to = context.args[2]
    keyword = " ".join(context.args[4:]).strip("'")

    if group_from not in forwards:
        forwards[group_from] = []

    forwards[group_from].append({"to": group_to, "keyword": keyword})

    with open(DATA_FILE, "w") as f:
        json.dump(forwards, f)

    await update.message.reply_text(f"‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {group_from} –≤ {group_to} –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç: '{keyword}'")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ—Ç –±–æ—Ç–æ–≤ (Zabbix)
async def forward_message(update: Update, context):
    logger.info(f"üîπ –í—ã–∑–≤–∞–Ω forward_message —Å update: {update}")
    message = update.message
    if not message:
        logger.warning("üö® –ù–µ—Ç message –≤ update!")
        return
    chat_id = str(message.chat_id)
    text = message.text or message.caption or ""

    user = message.from_user
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    logger.info(f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user.first_name} | –ë–æ—Ç: {user.is_bot}")
    if chat_id in forwards:
        for rule in forwards[chat_id]:
            if rule["keyword"].lower() in text.lower():
                logger.info(f"Processing forwarding rule for {chat_id} ‚Üí {rule['to']}")

                if user.is_bot:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Zabbix –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ ‚Äî –∫–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
                    logger.info("Message is from a bot, re-sending as a new message...")
                    await context.bot.send_message(
                        chat_id=int(rule["to"]),
                        text=f"‚ö† *–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ —á–∞—Ç–∞:* {message.chat.title or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç'}\n\n{text}",
                        parse_mode="Markdown"
                    )
                else:
                    # –û–±—ã—á–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    logger.info("Forwarding message normally.")
                    await message.forward(chat_id=int(rule["to"]))

# Webhook –º–∞—Ä—à—Ä—É—Ç
@server.route("/webhook", methods=["POST"])
def webhook():
    try:
        logger.info(f"Received webhook request: {request.data}")  

        if not request.is_json:
          logger.error("Request is not JSON!")
          return "Unsupported Media Type", 415
        
        data = request.get_json()

        if data is None:
          logger.error("request.get_json() returned None!")
          return "Bad Request: Invalid JSON", 400

        logger.info(f"Parsed JSON: {data}")  
        update = Update.de_json(data, app.bot) 
    
        update = Update.de_json(data, app.bot)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        update = Update.de_json(data, app.bot)

        loop = asyncio.new_event_loop()  
        asyncio.set_event_loop(loop)

        loop.run_until_complete(app.process_update(update))  # <--- –ò—Å–ø–æ–ª—å–∑—É–µ–º process_update


        return "OK", 200
    except Exception as e:
        logger.error(f"Error in webhook: {e}", exc_info=True)  
        return f"Internal Server Error: {str(e)}", 500

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@server.route("/")
def home():
    return "Bot is running!!+!!", 200

# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_server():
    logger.info(f"Starting Flask server on port {PORT}...")
    server.run(host="0.0.0.0", port=PORT)

async def start_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Webhook –∏ –∑–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    logger.info(f"Initializing Telegram Application...")
    await app.initialize()
    logger.info(f"Setting Telegram webhook to {WEBHOOK_URL}/webhook")
    await app.bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loop = asyncio.get_event_loop()
    loop.run_in_executor(None, run_server)

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling, –µ—Å–ª–∏ webhook –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    # await app.run_polling()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await app.start()

if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("CreateForward", create_forward))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, forward_message)) # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä
    asyncio.run(start_bot())